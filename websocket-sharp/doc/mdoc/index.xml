<Overview>
  <Assemblies>
    <Assembly Name="websocket-sharp" Version="1.0.2.30644">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 11 00 00 00 29 17 fb 89 fe c3 91 f7 2b cb 8b e2 61 d2 3f 05 93 6d 65 a8 9e 63 72 a6 f5 d5 2c f2 9d 20 fa 0b c0 70 6a f6 88 7e 8b 90 3f 39 f5 76 c8 48 e0 bb 7b b2 7b ed d3 10 a7 1a 0f 70 98 0f 7f f4 4b 53 09 d2 a5 ef 36 c3 56 b4 aa f0 91 72 63 25 07 89 e0 93 3e 3f 2e f2 b9 73 0e 12 15 5d 43 56 c3 f4 70 a5 89 fe f7 f6 ac 3e 77 c2 d8 d0 84 91 f4 0c d1 f3 8e dc c3 c3 b8 38 3d 0c bf 17 de 20 78 c1 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("sta.blockhead")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("A C# implementation of the WebSocket protocol client &amp; server")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("websocket-sharp.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("websocket-sharp")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>A C# implementation of the WebSocket protocol client &amp; server.</Remarks>
  <Copyright>Copyright (c) 2010-2013 sta.blockhead</Copyright>
  <Types>
    <Namespace Name="WebSocketSharp">
      <Type Name="ByteOrder" Kind="Enumeration" />
      <Type Name="CloseEventArgs" Kind="Class" />
      <Type Name="CloseStatusCode" Kind="Enumeration" />
      <Type Name="ErrorEventArgs" Kind="Class" />
      <Type Name="Ext" Kind="Class" />
      <Type Name="MessageEventArgs" Kind="Class" />
      <Type Name="Opcode" Kind="Enumeration" />
      <Type Name="WebSocket" Kind="Class" />
      <Type Name="WsReceivedTooBigMessageException" Kind="Class" />
      <Type Name="WsState" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="WebSocketSharp.Net">
      <Type Name="AuthenticationSchemes" Kind="Enumeration" />
      <Type Name="AuthenticationSchemeSelector" Kind="Delegate" />
      <Type Name="Cookie" Kind="Class" />
      <Type Name="CookieCollection" Kind="Class" />
      <Type Name="CookieException" Kind="Class" />
      <Type Name="HttpListener" Kind="Class" />
      <Type Name="HttpListenerContext" Kind="Class" />
      <Type Name="HttpListenerException" Kind="Class" />
      <Type Name="HttpListenerPrefixCollection" Kind="Class" />
      <Type Name="HttpListenerRequest" Kind="Class" />
      <Type Name="HttpListenerResponse" Kind="Class" />
      <Type Name="HttpStatusCode" Kind="Enumeration" />
      <Type Name="HttpVersion" Kind="Class" />
      <Type Name="WebHeaderCollection" Kind="Class" />
    </Namespace>
    <Namespace Name="WebSocketSharp.Net.WebSockets">
      <Type Name="HttpListenerWebSocketContext" Kind="Class" />
      <Type Name="TcpListenerWebSocketContext" Kind="Class" />
      <Type Name="WebSocketContext" Kind="Class" />
    </Namespace>
    <Namespace Name="WebSocketSharp.Server">
      <Type Name="HttpRequestEventArgs" Kind="Class" />
      <Type Name="HttpServer" Kind="Class" />
      <Type Name="IServiceHost" Kind="Interface" />
      <Type Name="WebSocketServer" Kind="Class" />
      <Type Name="WebSocketServerBase" Kind="Class" />
      <Type Name="WebSocketService" Kind="Class" />
      <Type Name="WebSocketServiceHost`1" DisplayName="WebSocketServiceHost&lt;T&gt;" Kind="Class" />
      <Type Name="WebSocketServiceManager" Kind="Class" />
    </Namespace>
  </Types>
  <Title>websocket-sharp</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Sockets.TcpListener" />
      </Targets>
      <Member MemberName="AcceptWebSocket">
        <MemberSignature Language="C#" Value="public static WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext AcceptWebSocket (this System.Net.Sockets.TcpListener listener, bool secure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext AcceptWebSocket(class System.Net.Sockets.TcpListener listener, bool secure) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="listener" Type="System.Net.Sockets.TcpListener" RefType="this" />
          <Parameter Name="secure" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="listener">
            A <see cref="T:System.Net.Sockets.TcpListener" /> that provides a TCP connection to accept a WebSocket connection.
            </param>
          <param name="secure">
            A <see cref="T:System.Boolean" /> that indicates a secure connection or not. (<c>true</c> indicates a secure connection.)
            </param>
          <summary>
            Accepts a WebSocket connection by the <see cref="T:System.Net.Sockets.TcpListener" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.AcceptWebSocket(System.Net.Sockets.TcpListener,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Sockets.TcpListener" />
      </Targets>
      <Member MemberName="AcceptWebSocketAsync">
        <MemberSignature Language="C#" Value="public static void AcceptWebSocketAsync (this System.Net.Sockets.TcpListener listener, bool secure, Action&lt;WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext&gt; completed);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AcceptWebSocketAsync(class System.Net.Sockets.TcpListener listener, bool secure, class System.Action`1&lt;class WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext&gt; completed) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="listener" Type="System.Net.Sockets.TcpListener" RefType="this" />
          <Parameter Name="secure" Type="System.Boolean" />
          <Parameter Name="completed" Type="System.Action&lt;WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext&gt;" />
        </Parameters>
        <Docs>
          <param name="listener">
            A <see cref="T:System.Net.Sockets.TcpListener" /> that provides a TCP connection to accept a WebSocket connection.
            </param>
          <param name="secure">
            A <see cref="T:System.Boolean" /> that indicates a secure connection or not. (<c>true</c> indicates a secure connection.)
            </param>
          <param name="completed">
            An Action&lt;TcpListenerWebSocketContext&gt; delegate that contains the method(s) that is called when an asynchronous operation completes.
            </param>
          <summary>
            Accepts a WebSocket connection asynchronously by the <see cref="T:System.Net.Sockets.TcpListener" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.AcceptWebSocketAsync(System.Net.Sockets.TcpListener,System.Boolean,System.Action{WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Contains">
        <MemberSignature Language="C#" Value="public static bool Contains (this string str, char[] chars);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains(string str, char[] chars) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
          <Parameter Name="chars" Type="System.Char[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="str">
            A <see cref="T:System.String" /> to test.
            </param>
          <param name="chars">
            An array of <see cref="T:System.Char" /> that contains characters to find.
            </param>
          <summary>
            Determines whether the specified <see cref="T:System.String" /> contains any of characters
            in the specified array of <see cref="T:System.Char" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Contains(System.String,System.Char[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.EventHandler" />
      </Targets>
      <Member MemberName="Emit">
        <MemberSignature Language="C#" Value="public static void Emit (this EventHandler eventHandler, object sender, EventArgs e);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Emit(class System.EventHandler eventHandler, object sender, class System.EventArgs e) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="eventHandler" Type="System.EventHandler" RefType="this" />
          <Parameter Name="sender" Type="System.Object" />
          <Parameter Name="e" Type="System.EventArgs" />
        </Parameters>
        <Docs>
          <param name="eventHandler">
            An <see cref="T:System.EventHandler" /> to emit.
            </param>
          <param name="sender">
            An <see cref="T:System.Object" /> that emits the <paramref name="eventHandler" />.
            </param>
          <param name="e">
            An <see cref="T:System.EventArgs" /> that contains no event data.
            </param>
          <summary>
            Emit the specified <see cref="T:System.EventHandler" /> delegate if is not <see langword="null" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Emit(System.EventHandler,System.Object,System.EventArgs)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.EventHandler`1" />
      </Targets>
      <Member MemberName="Emit&lt;TEventArgs&gt;">
        <MemberSignature Language="C#" Value="public static void Emit&lt;TEventArgs&gt; (this EventHandler&lt;TEventArgs&gt; eventHandler, object sender, TEventArgs e) where TEventArgs : EventArgs;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Emit&lt;(class System.EventArgs) TEventArgs&gt;(class System.EventHandler`1&lt;!!TEventArgs&gt; eventHandler, object sender, !!TEventArgs e) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEventArgs">
            <Constraints>
              <BaseTypeName>System.EventArgs</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="eventHandler" Type="System.EventHandler&lt;TEventArgs&gt;" RefType="this" />
          <Parameter Name="sender" Type="System.Object" />
          <Parameter Name="e" Type="TEventArgs" />
        </Parameters>
        <Docs>
          <typeparam name="TEventArgs">
            The type of the event data generated by the event.
            </typeparam>
          <param name="eventHandler">
            An <b>EventHandler&lt;TEventArgs&gt;</b> to emit.
            </param>
          <param name="sender">
            An <see cref="T:System.Object" /> that emits the <paramref name="eventHandler" />.
            </param>
          <param name="e">
            A <b>TEventArgs</b> that contains the event data.
            </param>
          <summary>
            Emit the specified <b>EventHandler&lt;TEventArgs&gt;</b> delegate if is not <see langword="null" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Emit``1(System.EventHandler{``0},System.Object,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="EqualsAndSaveTo">
        <MemberSignature Language="C#" Value="public static bool EqualsAndSaveTo (this int value, char c, System.Collections.Generic.List&lt;byte&gt; dest);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EqualsAndSaveTo(int32 value, char c, class System.Collections.Generic.List`1&lt;unsigned int8&gt; dest) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Int32" RefType="this" />
          <Parameter Name="c" Type="System.Char" />
          <Parameter Name="dest" Type="System.Collections.Generic.List&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="value">
            An <see cref="T:System.Int32" /> to compare.
            </param>
          <param name="c">
            A <see cref="T:System.Char" /> to compare.
            </param>
          <param name="dest">
            A <strong>List&lt;byte&gt;</strong> to save the <paramref name="value" /> as <see cref="T:System.Byte" />.
            </param>
          <summary>
            Determines whether the specified <see cref="T:System.Int32" /> equals the specified <see cref="T:System.Char" /> as <see cref="T:System.Byte" />.
            And save this specified <see cref="T:System.Int32" /> as <see cref="T:System.Byte" /> to the specified <strong>List&lt;byte&gt;</strong>.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.EqualsAndSaveTo(System.Int32,System.Char,System.Collections.Generic.List{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Specialized.NameValueCollection" />
      </Targets>
      <Member MemberName="Exists">
        <MemberSignature Language="C#" Value="public static bool Exists (this System.Collections.Specialized.NameValueCollection collection, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(class System.Collections.Specialized.NameValueCollection collection, string name) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Collections.Specialized.NameValueCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="collection">
            A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains the entries.
            </param>
          <param name="name">
            A <see cref="T:System.String" /> that contains the key of the entry to find.
            </param>
          <summary>
            Determines whether the entry with the specified key exists in the specified <see cref="T:System.Collections.Specialized.NameValueCollection" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Exists(System.Collections.Specialized.NameValueCollection,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Specialized.NameValueCollection" />
      </Targets>
      <Member MemberName="Exists">
        <MemberSignature Language="C#" Value="public static bool Exists (this System.Collections.Specialized.NameValueCollection collection, string name, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(class System.Collections.Specialized.NameValueCollection collection, string name, string value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Collections.Specialized.NameValueCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="collection">
            A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains the entries.
            </param>
          <param name="name">
            A <see cref="T:System.String" /> that contains the key of the entry to find.
            </param>
          <param name="value">
            A <see cref="T:System.String" /> that contains the value of the entry to find.
            </param>
          <summary>
            Determines whether the entry with the specified both key and value exists in the specified <see cref="T:System.Collections.Specialized.NameValueCollection" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Exists(System.Collections.Specialized.NameValueCollection,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Uri" />
      </Targets>
      <Member MemberName="GetAbsolutePath">
        <MemberSignature Language="C#" Value="public static string GetAbsolutePath (this Uri uri);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetAbsolutePath(class System.Uri uri) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="uri" Type="System.Uri" RefType="this" />
        </Parameters>
        <Docs>
          <param name="uri">
            A <see cref="T:System.Uri" /> that contains the URI to get the absolute path from.
            </param>
          <summary>
            Gets the absolute path from the specified <see cref="T:System.Uri" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.GetAbsolutePath(System.Uri)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:WebSocketSharp.Net.HttpStatusCode" />
      </Targets>
      <Member MemberName="GetDescription">
        <MemberSignature Language="C#" Value="public static string GetDescription (this WebSocketSharp.Net.HttpStatusCode code);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDescription(valuetype WebSocketSharp.Net.HttpStatusCode code) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="code" Type="WebSocketSharp.Net.HttpStatusCode" RefType="this" />
        </Parameters>
        <Docs>
          <param name="code">
            One of <see cref="T:WebSocketSharp.Net.HttpStatusCode" /> values that contains an HTTP status code.
            </param>
          <summary>
            Gets the description of the HTTP status code using the specified <see cref="T:WebSocketSharp.Net.HttpStatusCode" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.GetDescription(WebSocketSharp.Net.HttpStatusCode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="GetName">
        <MemberSignature Language="C#" Value="public static string GetName (this string nameAndValue, string separator);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetName(string nameAndValue, string separator) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="nameAndValue" Type="System.String" RefType="this" />
          <Parameter Name="separator" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="nameAndValue">
            A <see cref="T:System.String" /> that contains a pair of name and value are separated by a separator string.
            </param>
          <param name="separator">
            A <see cref="T:System.String" /> that contains a separator string.
            </param>
          <summary>
            Gets the name from the specified <see cref="T:System.String" /> that contains a pair of name and value are separated by a separator string.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.GetName(System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="GetNameAndValue">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.KeyValuePair&lt;string,string&gt; GetNameAndValue (this string nameAndValue, string separator);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt; GetNameAndValue(string nameAndValue, string separator) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="nameAndValue" Type="System.String" RefType="this" />
          <Parameter Name="separator" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="nameAndValue">
            A <see cref="T:System.String" /> that contains a pair of name and value are separated by a separator string.
            </param>
          <param name="separator">
            A <see cref="T:System.String" /> that contains a separator string.
            </param>
          <summary>
            Gets the name and value from the specified <see cref="T:System.String" /> that contains a pair of name and value are separated by a separator string.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.GetNameAndValue(System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="GetStatusDescription">
        <MemberSignature Language="C#" Value="public static string GetStatusDescription (this int code);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetStatusDescription(int32 code) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="code" Type="System.Int32" RefType="this" />
        </Parameters>
        <Docs>
          <param name="code">
            An <see cref="T:System.Int32" /> that contains an HTTP status code.
            </param>
          <summary>
            Gets the description of the HTTP status code using the specified <see cref="T:System.Int32" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.GetStatusDescription(System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="GetValue">
        <MemberSignature Language="C#" Value="public static string GetValue (this string nameAndValue, string separator);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetValue(string nameAndValue, string separator) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="nameAndValue" Type="System.String" RefType="this" />
          <Parameter Name="separator" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="nameAndValue">
            A <see cref="T:System.String" /> that contains a pair of name and value are separated by a separator string.
            </param>
          <param name="separator">
            A <see cref="T:System.String" /> that contains a separator string.
            </param>
          <summary>
            Gets the value from the specified <see cref="T:System.String" /> that contains a pair of name and value are separated by a separator string.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.GetValue(System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="IsEmpty">
        <MemberSignature Language="C#" Value="public static bool IsEmpty (this string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEmpty(string value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
            A <see cref="T:System.String" /> to test.
            </param>
          <summary>
            Determines whether the specified <see cref="T:System.String" /> is a <see cref="F:System.String.Empty" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.IsEmpty(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="IsEnclosedIn">
        <MemberSignature Language="C#" Value="public static bool IsEnclosedIn (this string str, char c);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEnclosedIn(string str, char c) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
          <Parameter Name="c" Type="System.Char" />
        </Parameters>
        <Docs>
          <param name="str">
            A <see cref="T:System.String" /> to test.
            </param>
          <param name="c">
            A <see cref="T:System.Char" /> that contains character to find.
            </param>
          <summary>
            Determines whether the specified <see cref="T:System.String" /> is enclosed in the specified <see cref="T:System.Char" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.IsEnclosedIn(System.String,System.Char)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:WebSocketSharp.ByteOrder" />
      </Targets>
      <Member MemberName="IsHostOrder">
        <MemberSignature Language="C#" Value="public static bool IsHostOrder (this WebSocketSharp.ByteOrder order);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHostOrder(valuetype WebSocketSharp.ByteOrder order) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="order" Type="WebSocketSharp.ByteOrder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="order">
            A <see cref="T:WebSocketSharp.ByteOrder" /> to test.
            </param>
          <summary>
            Determines whether the specified <see cref="T:WebSocketSharp.ByteOrder" /> is host (this computer architecture) byte order.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.IsHostOrder(WebSocketSharp.ByteOrder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.IPAddress" />
      </Targets>
      <Member MemberName="IsLocal">
        <MemberSignature Language="C#" Value="public static bool IsLocal (this System.Net.IPAddress address);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLocal(class System.Net.IPAddress address) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="address" Type="System.Net.IPAddress" RefType="this" />
        </Parameters>
        <Docs>
          <param name="address">
            A <see cref="T:System.Net.IPAddress" /> to test.
            </param>
          <summary>
            Determines whether the specified <see cref="T:System.Net.IPAddress" /> represents a local IP address.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.IsLocal(System.Net.IPAddress)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="IsNull&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool IsNull&lt;T&gt; (this T obj) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNull&lt;class T&gt;(!!T obj) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="obj" Type="T" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The type of the <paramref name="obj" /> parameter.
            </typeparam>
          <param name="obj">
            A <b>class</b> to test.
            </param>
          <summary>
            Determines whether the specified object is <see langword="null" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.IsNull``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="IsNullDo&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool IsNullDo&lt;T&gt; (this T obj, Action act) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullDo&lt;class T&gt;(!!T obj, class System.Action act) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="obj" Type="T" RefType="this" />
          <Parameter Name="act" Type="System.Action" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The type of the <paramref name="obj" /> parameter.
            </typeparam>
          <param name="obj">
            A <b>class</b> to test.
            </param>
          <param name="act">
            An <see cref="T:System.Action" /> delegate that contains the method(s) called if the <paramref name="obj" /> is <see langword="null" />.
            </param>
          <summary>
            Determines whether the specified object is <see langword="null" />.
            And invokes the specified <see cref="T:System.Action" /> delegate if the specified object is <see langword="null" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.IsNullDo``1(``0,System.Action)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="IsNullOrEmpty">
        <MemberSignature Language="C#" Value="public static bool IsNullOrEmpty (this string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullOrEmpty(string value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
            A <see cref="T:System.String" /> to test.
            </param>
          <summary>
            Determines whether the specified <see cref="T:System.String" /> is <see langword="null" /> or <see cref="F:System.String.Empty" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.IsNullOrEmpty(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="IsPredefinedScheme">
        <MemberSignature Language="C#" Value="public static bool IsPredefinedScheme (this string scheme);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPredefinedScheme(string scheme) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="scheme" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="scheme">
            A <see cref="T:System.String" /> to test.
            </param>
          <summary>
            Determines whether the specified <see cref="T:System.String" /> is predefined scheme.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.IsPredefinedScheme(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:WebSocketSharp.Net.HttpListenerRequest" />
      </Targets>
      <Member MemberName="IsUpgradeTo">
        <MemberSignature Language="C#" Value="public static bool IsUpgradeTo (this WebSocketSharp.Net.HttpListenerRequest request, string protocol);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpgradeTo(class WebSocketSharp.Net.HttpListenerRequest request, string protocol) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="WebSocketSharp.Net.HttpListenerRequest" RefType="this" />
          <Parameter Name="protocol" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="request">
            A <see cref="T:WebSocketSharp.Net.HttpListenerRequest" /> that contains an HTTP request information.
            </param>
          <param name="protocol">
            A <see cref="T:System.String" /> that contains a protocol name.
            </param>
          <summary>
            Determines whether the specified <see cref="T:WebSocketSharp.Net.HttpListenerRequest" /> is the HTTP Upgrade request
            to switch to the specified <paramref name="protocol" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.IsUpgradeTo(WebSocketSharp.Net.HttpListenerRequest,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="IsValidAbsolutePath">
        <MemberSignature Language="C#" Value="public static bool IsValidAbsolutePath (this string absPath, out string message);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidAbsolutePath(string absPath, string message) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="absPath" Type="System.String" RefType="this" />
          <Parameter Name="message" Type="System.String&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <param name="absPath">
            A <see cref="T:System.String" /> to test.
            </param>
          <param name="message">
            A <see cref="T:System.String" /> that receives a message if the <paramref name="absPath" /> is invalid.
            </param>
          <summary>
            Determines whether the specified <see cref="T:System.String" /> is valid absolute path.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.IsValidAbsolutePath(System.String,System.String@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="MaybeUri">
        <MemberSignature Language="C#" Value="public static bool MaybeUri (this string uriString);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool MaybeUri(string uriString) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="uriString" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="uriString">
            A <see cref="T:System.String" /> to test.
            </param>
          <summary>
            Determines whether the specified <see cref="T:System.String" /> is a URI string.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.MaybeUri(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="NotEqual">
        <MemberSignature Language="C#" Value="public static bool NotEqual (this string expected, string actual, bool ignoreCase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool NotEqual(string expected, string actual, bool ignoreCase) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="expected" Type="System.String" RefType="this" />
          <Parameter Name="actual" Type="System.String" />
          <Parameter Name="ignoreCase" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="expected">
            The first <see cref="T:System.String" /> to compare.
            </param>
          <param name="actual">
            The second <see cref="T:System.String" /> to compare.
            </param>
          <param name="ignoreCase">
            A <see cref="T:System.Boolean" /> that indicates a case-sensitive or insensitive comparison. (<c>true</c> indicates a case-insensitive comparison.)
            </param>
          <summary>
            Determines whether two specified <see cref="T:System.String" /> objects don't have the same value.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.NotEqual(System.String,System.String,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="ReadBytes">
        <MemberSignature Language="C#" Value="public static byte[] ReadBytes (this System.IO.Stream stream, int length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ReadBytes(class System.IO.Stream stream, int32 length) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Byte[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="length" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="stream">
            A <see cref="T:System.IO.Stream" /> that contains the data to read.
            </param>
          <param name="length">
            An <see cref="T:System.Int32" /> that contains the number of bytes to read.
            </param>
          <summary>
            Reads a block of bytes from the specified stream and returns the read data in an array of <see cref="T:System.Byte" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.ReadBytes(System.IO.Stream,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="ReadBytes">
        <MemberSignature Language="C#" Value="public static byte[] ReadBytes (this System.IO.Stream stream, long length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ReadBytes(class System.IO.Stream stream, int64 length) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Byte[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="length" Type="System.Int64" />
        </Parameters>
        <Docs>
          <param name="stream">
            A <see cref="T:System.IO.Stream" /> that contains the data to read.
            </param>
          <param name="length">
            A <see cref="T:System.Int64" /> that contains the number of bytes to read.
            </param>
          <summary>
            Reads a block of bytes from the specified stream and returns the read data in an array of <see cref="T:System.Byte" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.ReadBytes(System.IO.Stream,System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="ReadBytes">
        <MemberSignature Language="C#" Value="public static byte[] ReadBytes (this System.IO.Stream stream, long length, int bufferLength);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ReadBytes(class System.IO.Stream stream, int64 length, int32 bufferLength) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Byte[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="length" Type="System.Int64" />
          <Parameter Name="bufferLength" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="stream">
            A <see cref="T:System.IO.Stream" /> that contains the data to read.
            </param>
          <param name="length">
            A <see cref="T:System.Int64" /> that contains the number of bytes to read.
            </param>
          <param name="bufferLength">
            An <see cref="T:System.Int32" /> that contains the buffer size in bytes of each internal read.
            </param>
          <summary>
            Reads a block of bytes from the specified stream and returns the read data in an array of <see cref="T:System.Byte" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.ReadBytes(System.IO.Stream,System.Int64,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:T[]" />
      </Targets>
      <Member MemberName="SubArray&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T[] SubArray&lt;T&gt; (this T[] array, int startIndex, int length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] SubArray&lt;T&gt;(!!T[] array, int32 startIndex, int32 length) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T[]</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[]" RefType="this" />
          <Parameter Name="startIndex" Type="System.Int32" />
          <Parameter Name="length" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The type of elements in the <paramref name="array" />.
            </typeparam>
          <param name="array">
            An array of T that contains the data to retrieve a sub-array.
            </param>
          <param name="startIndex">
            An <see cref="T:System.Int32" /> that contains the zero-based starting position of a sub-array in the <paramref name="array" />.
            </param>
          <param name="length">
            An <see cref="T:System.Int32" /> that contains the number of elements to retrieve a sub-array.
            </param>
          <summary>
            Retrieves a sub-array from the specified <paramref name="array" />. A sub-array starts at the specified element position.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.SubArray``1(``0[],System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="Times">
        <MemberSignature Language="C#" Value="public static void Times (this int n, Action act);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Times(int32 n, class System.Action act) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="n" Type="System.Int32" RefType="this" />
          <Parameter Name="act" Type="System.Action" />
        </Parameters>
        <Docs>
          <param name="n">
            An <see cref="T:System.Int32" /> that contains the number of times to execute.
            </param>
          <param name="act">
            An <see cref="T:System.Action" /> delegate that contains the method(s) to execute.
            </param>
          <summary>
            Executes the specified <see cref="T:System.Action" /> delegate <paramref name="n" /> times.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Times(System.Int32,System.Action)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="Times">
        <MemberSignature Language="C#" Value="public static void Times (this int n, Action&lt;ulong&gt; act);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Times(int32 n, class System.Action`1&lt;unsigned int64&gt; act) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="n" Type="System.Int32" RefType="this" />
          <Parameter Name="act" Type="System.Action&lt;System.UInt64&gt;" />
        </Parameters>
        <Docs>
          <param name="n">
            An <see cref="T:System.Int32" /> that contains the number of times to execute.
            </param>
          <param name="act">
            An <b>Action&lt;ulong&gt;</b> delegate that contains the method(s) to execute.
            A <see cref="T:System.UInt64" /> parameter to pass to this method(s) contains the zero-based count of iteration.
            </param>
          <summary>
            Executes the specified <b>Action&lt;ulong&gt;</b> delegate <paramref name="n" /> times.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Times(System.Int32,System.Action{System.UInt64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int64" />
      </Targets>
      <Member MemberName="Times">
        <MemberSignature Language="C#" Value="public static void Times (this long n, Action act);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Times(int64 n, class System.Action act) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="n" Type="System.Int64" RefType="this" />
          <Parameter Name="act" Type="System.Action" />
        </Parameters>
        <Docs>
          <param name="n">
            A <see cref="T:System.Int64" /> that contains the number of times to execute.
            </param>
          <param name="act">
            An <see cref="T:System.Action" /> delegate that contains the method(s) to execute.
            </param>
          <summary>
            Executes the specified <see cref="T:System.Action" /> delegate <paramref name="n" /> times.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Times(System.Int64,System.Action)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int64" />
      </Targets>
      <Member MemberName="Times">
        <MemberSignature Language="C#" Value="public static void Times (this long n, Action&lt;ulong&gt; act);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Times(int64 n, class System.Action`1&lt;unsigned int64&gt; act) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="n" Type="System.Int64" RefType="this" />
          <Parameter Name="act" Type="System.Action&lt;System.UInt64&gt;" />
        </Parameters>
        <Docs>
          <param name="n">
            A <see cref="T:System.Int64" /> that contains the number of times to execute.
            </param>
          <param name="act">
            An <b>Action&lt;ulong&gt;</b> delegate that contains the method(s) to execute.
            A <see cref="T:System.UInt64" /> parameter to pass to this method(s) contains the zero-based count of iteration.
            </param>
          <summary>
            Executes the specified <b>Action&lt;ulong&gt;</b> delegate <paramref name="n" /> times.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Times(System.Int64,System.Action{System.UInt64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.UInt32" />
      </Targets>
      <Member MemberName="Times">
        <MemberSignature Language="C#" Value="public static void Times (this uint n, Action act);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Times(unsigned int32 n, class System.Action act) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="n" Type="System.UInt32" RefType="this" />
          <Parameter Name="act" Type="System.Action" />
        </Parameters>
        <Docs>
          <param name="n">
            A <see cref="T:System.UInt32" /> that contains the number of times to execute.
            </param>
          <param name="act">
            An <see cref="T:System.Action" /> delegate that contains the method(s) to execute.
            </param>
          <summary>
            Executes the specified <see cref="T:System.Action" /> delegate <paramref name="n" /> times.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Times(System.UInt32,System.Action)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.UInt32" />
      </Targets>
      <Member MemberName="Times">
        <MemberSignature Language="C#" Value="public static void Times (this uint n, Action&lt;ulong&gt; act);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Times(unsigned int32 n, class System.Action`1&lt;unsigned int64&gt; act) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="n" Type="System.UInt32" RefType="this" />
          <Parameter Name="act" Type="System.Action&lt;System.UInt64&gt;" />
        </Parameters>
        <Docs>
          <param name="n">
            A <see cref="T:System.UInt32" /> that contains the number of times to execute.
            </param>
          <param name="act">
            An <b>Action&lt;ulong&gt;</b> delegate that contains the method(s) to execute.
            A <see cref="T:System.UInt64" /> parameter to pass to this method(s) contains the zero-based count of iteration.
            </param>
          <summary>
            Executes the specified <b>Action&lt;ulong&gt;</b> delegate <paramref name="n" /> times.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Times(System.UInt32,System.Action{System.UInt64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.UInt64" />
      </Targets>
      <Member MemberName="Times">
        <MemberSignature Language="C#" Value="public static void Times (this ulong n, Action act);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Times(unsigned int64 n, class System.Action act) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="n" Type="System.UInt64" RefType="this" />
          <Parameter Name="act" Type="System.Action" />
        </Parameters>
        <Docs>
          <param name="n">
            A <see cref="T:System.UInt64" /> that contains the number of times to execute.
            </param>
          <param name="act">
            An <see cref="T:System.Action" /> delegate that contains the method(s) to execute.
            </param>
          <summary>
            Executes the specified <see cref="T:System.Action" /> delegate <paramref name="n" /> times.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Times(System.UInt64,System.Action)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.UInt64" />
      </Targets>
      <Member MemberName="Times">
        <MemberSignature Language="C#" Value="public static void Times (this ulong n, Action&lt;ulong&gt; act);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Times(unsigned int64 n, class System.Action`1&lt;unsigned int64&gt; act) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="n" Type="System.UInt64" RefType="this" />
          <Parameter Name="act" Type="System.Action&lt;System.UInt64&gt;" />
        </Parameters>
        <Docs>
          <param name="n">
            A <see cref="T:System.UInt64" /> that contains the number of times to execute.
            </param>
          <param name="act">
            An <b>Action&lt;ulong&gt;</b> delegate that contains the method(s) to execute.
            A <see cref="T:System.UInt64" /> parameter to pass to this method(s) contains the zero-based count of iteration.
            </param>
          <summary>
            Executes the specified <b>Action&lt;ulong&gt;</b> delegate <paramref name="n" /> times.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.Times(System.UInt64,System.Action{System.UInt64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Byte[]" />
      </Targets>
      <Member MemberName="To&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T To&lt;T&gt; (this byte[] src, WebSocketSharp.ByteOrder srcOrder) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T To&lt;struct .ctor (class System.ValueType) T&gt;(unsigned int8[] src, valuetype WebSocketSharp.ByteOrder srcOrder) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="src" Type="System.Byte[]" RefType="this" />
          <Parameter Name="srcOrder" Type="WebSocketSharp.ByteOrder" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The type of the return value. The T must be a value type.
            </typeparam>
          <param name="src">
            An array of <see cref="T:System.Byte" /> to convert.
            </param>
          <param name="srcOrder">
            A <see cref="T:WebSocketSharp.ByteOrder" /> that indicates the byte order of the <paramref name="src" />.
            </param>
          <summary>
            Converts the specified array of <see cref="T:System.Byte" /> to the specified type data.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.To``1(System.Byte[],WebSocketSharp.ByteOrder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueType" />
      </Targets>
      <Member MemberName="ToBytes&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static byte[] ToBytes&lt;T&gt; (this T value, WebSocketSharp.ByteOrder order) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ToBytes&lt;struct .ctor (class System.ValueType) T&gt;(!!T value, valuetype WebSocketSharp.ByteOrder order) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Byte[]</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="T" RefType="this" />
          <Parameter Name="order" Type="WebSocketSharp.ByteOrder" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The type of the <paramref name="value" />. The T must be a value type.
            </typeparam>
          <param name="value">
            A T to convert.
            </param>
          <param name="order">
            A <see cref="T:WebSocketSharp.ByteOrder" /> that indicates the byte order of the return.
            </param>
          <summary>
            Converts the specified data to an array of <see cref="T:System.Byte" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.ToBytes``1(``0,WebSocketSharp.ByteOrder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Byte[]" />
      </Targets>
      <Member MemberName="ToHostOrder">
        <MemberSignature Language="C#" Value="public static byte[] ToHostOrder (this byte[] src, WebSocketSharp.ByteOrder srcOrder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ToHostOrder(unsigned int8[] src, valuetype WebSocketSharp.ByteOrder srcOrder) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Byte[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="src" Type="System.Byte[]" RefType="this" />
          <Parameter Name="srcOrder" Type="WebSocketSharp.ByteOrder" />
        </Parameters>
        <Docs>
          <param name="src">
            An array of <see cref="T:System.Byte" /> to convert.
            </param>
          <param name="srcOrder">
            A <see cref="T:WebSocketSharp.ByteOrder" /> that indicates the byte order of the <paramref name="src" />.
            </param>
          <summary>
            Converts the order of the specified array of <see cref="T:System.Byte" /> to the host byte order.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.ToHostOrder(System.Byte[],WebSocketSharp.ByteOrder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:T[]" />
      </Targets>
      <Member MemberName="ToString&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static string ToString&lt;T&gt; (this T[] array, string separator);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString&lt;T&gt;(!!T[] array, string separator) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[]" RefType="this" />
          <Parameter Name="separator" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The type of elements in the <paramref name="array" />.
            </typeparam>
          <param name="array">
            An array of T to convert.
            </param>
          <param name="separator">
            A <see cref="T:System.String" /> that contains a separator string.
            </param>
          <summary>
            Converts the specified array to a <see cref="T:System.String" /> concatenated the specified separator string
            between each element of this array.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.ToString``1(``0[],System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToUri">
        <MemberSignature Language="C#" Value="public static Uri ToUri (this string uriString);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri ToUri(string uriString) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Uri</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="uriString" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="uriString">
            A <see cref="T:System.String" /> to convert.
            </param>
          <summary>
            Converts the specified <see cref="T:System.String" /> to a <see cref="T:System.Uri" /> object.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.ToUri(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="TryCreateWebSocketUri">
        <MemberSignature Language="C#" Value="public static bool TryCreateWebSocketUri (this string uriString, out Uri result, out string message);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreateWebSocketUri(string uriString, class System.Uri result, string message) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="uriString" Type="System.String" RefType="this" />
          <Parameter Name="result" Type="System.Uri&amp;" RefType="out" />
          <Parameter Name="message" Type="System.String&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <param name="uriString">
            A <see cref="T:System.String" /> that contains a WebSocket URI.
            </param>
          <param name="result">
            When this method returns, contains a created WebSocket <see cref="T:System.Uri" /> if the <paramref name="uriString" /> parameter is valid WebSocket URI; otherwise, <see langword="null" />.
            </param>
          <param name="message">
            When this method returns, contains a error message <see cref="T:System.String" /> if the <paramref name="uriString" /> parameter is invalid WebSocket URI; otherwise, <c>String.Empty</c>.
            </param>
          <summary>
            Tries to create a new WebSocket <see cref="T:System.Uri" /> using the specified <paramref name="uriString" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.TryCreateWebSocketUri(System.String,System.Uri@,System.String@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="UrlDecode">
        <MemberSignature Language="C#" Value="public static string UrlDecode (this string s);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlDecode(string s) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="s" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="s">
            A <see cref="T:System.String" /> to decode.
            </param>
          <summary>
            URL-decodes the specified <see cref="T:System.String" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.UrlDecode(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="UrlEncode">
        <MemberSignature Language="C#" Value="public static string UrlEncode (this string s);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string s) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="s" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="s">
            A <see cref="T:System.String" /> to encode.
            </param>
          <summary>
            URL-encodes the specified <see cref="T:System.String" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.UrlEncode(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:WebSocketSharp.Net.HttpListenerResponse" />
      </Targets>
      <Member MemberName="WriteContent">
        <MemberSignature Language="C#" Value="public static void WriteContent (this WebSocketSharp.Net.HttpListenerResponse response, byte[] content);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteContent(class WebSocketSharp.Net.HttpListenerResponse response, unsigned int8[] content) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="response" Type="WebSocketSharp.Net.HttpListenerResponse" RefType="this" />
          <Parameter Name="content" Type="System.Byte[]" />
        </Parameters>
        <Docs>
          <param name="response">
            A <see cref="T:WebSocketSharp.Net.HttpListenerResponse" /> that contains a network stream to write a content data.
            </param>
          <param name="content">
            An array of <see cref="T:System.Byte" /> that contains a content data to write.
            </param>
          <summary>
            Writes the specified content data using the specified <see cref="T:WebSocketSharp.Net.HttpListenerResponse" />.
            </summary>
        </Docs>
        <Link Type="WebSocketSharp.Ext" Member="M:WebSocketSharp.Ext.WriteContent(WebSocketSharp.Net.HttpListenerResponse,System.Byte[])" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
