<Type Name="HttpListener" FullName="WebSocketSharp.Net.HttpListener">
  <TypeSignature Language="C#" Value="public sealed class HttpListener : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListener extends System.Object implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>websocket-sharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Provides a simple, programmatically controlled HTTP listener.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Net.HttpListener" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Shuts down the <see cref="T:WebSocketSharp.Net.HttpListener" /> immediately.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemes">
      <MemberSignature Language="C#" Value="public WebSocketSharp.Net.AuthenticationSchemes AuthenticationSchemes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype WebSocketSharp.Net.AuthenticationSchemes AuthenticationSchemes" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>WebSocketSharp.Net.AuthenticationSchemes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
        <value>
            One of the <see cref="T:WebSocketSharp.Net.AuthenticationSchemes" /> values that indicates the scheme used to
            authenticate the clients. The default value is <see cref="F:WebSocketSharp.Net.AuthenticationSchemes.Anonymous" />.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemeSelectorDelegate">
      <MemberSignature Language="C#" Value="public WebSocketSharp.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class WebSocketSharp.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>WebSocketSharp.Net.AuthenticationSchemeSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the delegate called to determine the scheme used to authenticate clients.
            </summary>
        <value>
            A <see cref="T:WebSocketSharp.Net.AuthenticationSchemeSelector" /> delegate that invokes the method(s) used to select
            an authentication scheme. The default value is <see langword="null" />.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetContext">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginGetContext (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginGetContext(class System.AsyncCallback callback, object state) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
            An <see cref="T:System.AsyncCallback" /> delegate that references the method(s)
            called when the asynchronous operation completes.
            </param>
        <param name="state">
            An <see cref="T:System.Object" /> that contains a user defined object to pass to the <paramref name="callback" /> delegate.
            </param>
        <summary>
            Begins getting an incoming request information asynchronously.
            </summary>
        <returns>
            An <see cref="T:System.IAsyncResult" /> that contains the status of the asynchronous operation.
            </returns>
        <remarks>
            This asynchronous operation must be completed by calling the <see cref="M:WebSocketSharp.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> method.
            Typically, the method is invoked by the <paramref name="callback" /> delegate.
            </remarks>
        <exception cref="T:System.InvalidOperationException">
            The <see cref="T:WebSocketSharp.Net.HttpListener" /> has not been started or is stopped currently.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Shuts down the <see cref="T:WebSocketSharp.Net.HttpListener" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetContext">
      <MemberSignature Language="C#" Value="public WebSocketSharp.Net.HttpListenerContext EndGetContext (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSocketSharp.Net.HttpListenerContext EndGetContext(class System.IAsyncResult asyncResult) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>WebSocketSharp.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
            An <see cref="T:System.IAsyncResult" /> obtained by calling the <see cref="M:WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> method.
            </param>
        <summary>
            Ends an asynchronous operation to get an incoming request information.
            </summary>
        <returns>
            A <see cref="T:WebSocketSharp.Net.HttpListenerContext" /> that contains a client's request information.
            </returns>
        <remarks>
            This method completes an asynchronous operation started by calling the <see cref="M:WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> method.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> was not obtained by calling the <see cref="M:WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> method.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The EndGetContext method was already called for the specified <paramref name="asyncResult" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public WebSocketSharp.Net.HttpListenerContext GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class WebSocketSharp.Net.HttpListenerContext GetContext() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>WebSocketSharp.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an incoming request information.
            </summary>
        <returns>
            A <see cref="T:WebSocketSharp.Net.HttpListenerContext" /> that contains a client's request information.
            </returns>
        <remarks>
            This method waits for an incoming request and returns the request information
            when received the request.
            </remarks>
        <exception cref="T:System.InvalidOperationException">
            The <see cref="T:WebSocketSharp.Net.HttpListener" /> does not have any URI prefixes to listen on.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreWriteExceptions">
      <MemberSignature Language="C#" Value="public bool IgnoreWriteExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWriteExceptions" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsListening">
      <MemberSignature Language="C#" Value="public bool IsListening { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsListening" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the <see cref="T:WebSocketSharp.Net.HttpListener" /> has been started.
            </summary>
        <value>
          <c>true</c> if the <see cref="T:WebSocketSharp.Net.HttpListener" /> has been started; otherwise, <c>false</c>.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the <see cref="T:WebSocketSharp.Net.HttpListener" /> can be used with the current operating system.
            </summary>
        <value>
          <c>true</c>.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixes">
      <MemberSignature Language="C#" Value="public WebSocketSharp.Net.HttpListenerPrefixCollection Prefixes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class WebSocketSharp.Net.HttpListenerPrefixCollection Prefixes" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>WebSocketSharp.Net.HttpListenerPrefixCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the URI prefixes handled by the <see cref="T:WebSocketSharp.Net.HttpListener" />.
            </summary>
        <value>
            A <see cref="T:WebSocketSharp.Net.HttpListenerPrefixCollection" /> that contains the URI prefixes.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Realm">
      <MemberSignature Language="C#" Value="public string Realm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Realm" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the name of the realm associated with the <see cref="T:WebSocketSharp.Net.HttpListener" />.
            </summary>
        <value>
            A <see cref="T:System.String" /> that contains the name of the realm.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Starts to receive incoming requests.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Stops receiving incoming requests.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Releases all resource used by the <see cref="T:WebSocketSharp.Net.HttpListener" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeConnectionNtlmAuthentication">
      <MemberSignature Language="C#" Value="public bool UnsafeConnectionNtlmAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeConnectionNtlmAuthentication" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
