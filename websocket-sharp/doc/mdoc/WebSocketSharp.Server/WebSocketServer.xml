<Type Name="WebSocketServer" FullName="WebSocketSharp.Server.WebSocketServer">
  <TypeSignature Language="C#" Value="public class WebSocketServer : WebSocketSharp.Server.WebSocketServerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebSocketServer extends WebSocketSharp.Server.WebSocketServerBase" />
  <AssemblyInfo>
    <AssemblyName>websocket-sharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>WebSocketSharp.Server.WebSocketServerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides the functions of the server that receives the WebSocket connection requests.
            </summary>
    <remarks>
            The WebSocketServer class provides the multi WebSocket service.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebSocketServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebSocketServer (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer" /> class that listens for incoming connection attempts
            on the specified <paramref name="port" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebSocketServer (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">
            A <see cref="T:System.String" /> that contains a WebSocket URL.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer" /> class that listens for incoming connection attempts
            on the specified WebSocket URL.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebSocketServer (int port, bool secure);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port, bool secure) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="secure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
        <param name="secure">
            A <see cref="T:System.Boolean" /> that indicates providing a secure connection or not. (<c>true</c> indicates providing a secure connection.)
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer" /> class that listens for incoming connection attempts
            on the specified <paramref name="port" /> and <paramref name="secure" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebSocketServer (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">
            A <see cref="T:System.Net.IPAddress" /> that contains a local IP address.
            </param>
        <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer" /> class that listens for incoming connection attempts
            on the specified <paramref name="address" /> and <paramref name="port" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebSocketServer (System.Net.IPAddress address, int port, bool secure);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress address, int32 port, bool secure) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="secure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="address">
            A <see cref="T:System.Net.IPAddress" /> that contains a local IP address.
            </param>
        <param name="port">
            An <see cref="T:System.Int32" /> that contains a port number.
            </param>
        <param name="secure">
            A <see cref="T:System.Boolean" /> that indicates providing a secure connection or not. (<c>true</c> indicates providing a secure connection.)
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:WebSocketSharp.Server.WebSocketServer" /> class that listens for incoming connection attempts
            on the specified <paramref name="address" />, <paramref name="port" /> and <paramref name="secure" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocket">
      <MemberSignature Language="C#" Value="protected override void AcceptWebSocket (WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AcceptWebSocket(class WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext context) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext" />
      </Parameters>
      <Docs>
        <param name="context">
            A <see cref="T:WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext" /> that contains the WebSocket connection request objects.
            </param>
        <summary>
            Accepts a WebSocket connection request.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddWebSocketService&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AddWebSocketService&lt;T&gt; (string absPath) where T : WebSocketSharp.Server.WebSocketServicenew();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddWebSocketService&lt;.ctor (class WebSocketSharp.Server.WebSocketService) T&gt;(string absPath) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <BaseTypeName>WebSocketSharp.Server.WebSocketService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="absPath" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The type of the WebSocket service. The T must inherit the <see cref="T:WebSocketSharp.Server.WebSocketService" /> class.
            </typeparam>
        <param name="absPath">
            A <see cref="T:System.String" /> that contains an absolute path associated with the WebSocket service.
            </param>
        <summary>
            Adds the specified type WebSocket service.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Broadcast">
      <MemberSignature Language="C#" Value="public void Broadcast (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Broadcast(string data) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
            A <see cref="T:System.String" /> to broadcast.
            </param>
        <summary>
            Broadcasts the specified <see cref="T:System.String" /> to all clients.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServicePaths">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; ServicePaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; ServicePaths" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the collection of paths associated with the every WebSocket services that the server provides.
            </summary>
        <value>
            An IEnumerable&lt;string&gt; that contains the collection of paths.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public override void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Stops receiving the WebSocket connection requests.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sweeped">
      <MemberSignature Language="C#" Value="public bool Sweeped { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sweeped" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether the server cleans up the inactive clients periodically.
            </summary>
        <value>
          <c>true</c> if the server cleans up the inactive clients every 60 seconds; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
